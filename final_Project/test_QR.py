import QR

#Problem 1
def test_stable_Gram_Schmidt():
    matrix_A = [[1,0,1],[2,1,0]]
    matrix_B = [[1, 2], [3, 4]]
    assert QR.stable_Gram_Schmidt(matrix_A) == [[[0.7071067811865475, 0.0, 0.7071067811865475], [(0.577350269189626+0j), (0.5773502691896258+0j), (-0.5773502691896257+0j)]], [[1.4142135623730951, 0], [(1.414213562373095+0j), (1.7320508075688772+0j)]]]
    assert QR.stable_Gram_Schmidt(matrix_B) == [[[0.4472135954999579, 0.8944271909999159], [(0.8944271909999162+0j), (-0.4472135954999574+0j)]], [[2.23606797749979, 0], [(4.919349550499537+0j), (0.8944271909999159+0j)]]]

#Problem 2
def test_orthonormal_Conversion():
    matrix_A = [[1,2,3],[4,5,6]]
    matrix_B = [[10,27],[30,35]]
    assert QR.orthonormal_Conversion(matrix_A) == [[0.2672612419124244, 0.5345224838248488, 0.8017837257372732], [(0.8728715609439694+0j), (0.21821789023599208+0j), (-0.43643578047198506+0j)]]
    assert QR.orthonormal_Conversion(matrix_B) == [[0.34731435582359393, 0.9377487607237036], [(0.9377487607237038+0j), (-0.34731435582359366+0j)]]
    
#Problem 3
def test_householder_Ortho():
    matrix_A = [[2,2,1],[-2,1,2],[1,3,1]]
    matrix_B = [[[2,2,1,3],[-2,1,2,1],[1,3,1,2],[1,2,1,1]]]
    assert QR.householder_Ortho(matrix_A) == [[[(0.6666666666666667+0j), (0.6666666666666666+0j), (0.3333333333333333+0j)], [(-0.6666666666666666+0j), (0.3333333333333332+0j), (0.6666666666666666+0j)], [(-0.33333333333333337+0j), (0.6666666666666666+0j), (-0.6666666666666667+0j)]], [[(3.0000000000000004+0j), (-1.1102230246251564e-16+0j), (-1.1102230246251565e-16+0j)], [(-2.220446049250313e-16+0j), (3+0j), 0j], [(3.0000000000000004+0j), (0.9999999999999997+0j), (1+0j)]]]
    assert QR.householder_Ortho(matrix_B) == [[[(0.4714045207910319+0j), (0.4714045207910316+0j), (0.2357022603955158+0j), (0.7071067811865475+0j)], [(-0.7570332986102248+0j), (0.21629522817435015+0j), (0.5948118774794626+0j), (0.1622214211307625+0j)], [(-0.03877833671647413+0j), (0.8531234077624293+0j), (-0.23267002029884426+0j), (-0.4653400405976886+0j)], [(0.4507489358552087+0j), (-0.05634361698190091+0j), (0.7324670207647141+0j), (-0.50709255283711+0j)]], [[(4.242640687119286+0j), (5.243253945342677e-16+0j), (-7.831326933308588e-17+0j), (-4.033412595801067e-16+0j)], [(0.7071067811865469+0j), (3.082207001484488+0j), (6.330920685972348e-16+0j), (3.463609239530097e-16+0j)], [(3.5355339059327373+0j), (0.8111071056538129+0j), (1.3572417850765923+0j), (1.3877787807814457e-16+0j)], [(2.3570226039551585+0j), (0.43259045634870047+0j), (0.9694584179118515+0j), (0.5634361698190109+0j)]]]
